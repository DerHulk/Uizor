@inject IModalService Service
@if (Visiable)
{
    <div>
        test(@this.ModalStyle)test
    </div>
    <div tabindex="-1" role="dialog" class="modal @this.ModalStyle" onkeydown="@OnKeyDown">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Modal body text goes here.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary">Save changes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool Visiable { get; set; } = false;
    private string ModalStyle => this.Visiable ? "show-modal" : "";

    protected override Task OnInitializedAsync()
    {
        this.Service.OnOpenRequest += async (object sender, EventArgs args) =>
        {
            this.Visiable = !this.Visiable;

            await this.InvokeAsync(this.StateHasChanged);
        };
        return base.OnInitializedAsync();
    }

    private Task OnKeyDown(KeyboardEventArgs e)
    {
        if (string.Equals(e.Key, "Escape", StringComparison.OrdinalIgnoreCase))
        {
            this.Visiable = false;
            //todo callback dialog closed Event!
        }

        return Task.CompletedTask;
    }
}
